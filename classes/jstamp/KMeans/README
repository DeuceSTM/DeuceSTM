Introduction
------------

This benchmark was taken from NU-MineBench 2.0. Their technical report [3]
provides a description of the algorithm:

    K-means is a partition-based method [4] and is arguably the most
    commonly used clustering technique. K-means represents a cluster by the
    mean value of all objects contained in it. Given the user-provided
    parameter k, the initial k cluster centers are randomly selected from
    the database. Then, K-means assigns each object to its nearest cluster
    center based on the similarity function. For example, for spatial
    clustering, usually the Euclid distance is used to measure the closeness
    of two objects. Once the assignments are completed, new centers are
    found by finding the mean of all the objects in each cluster. This
    process is repeated until two consecutive iterations generate the same
    cluster assignment. The clusters produced by the K-means algorithm are
    sometimes called "hard" clusters, since any data object either is or is
    not a member of a particular cluster.


Compiling and Running
---------------------

To build the application, simply run:

    make 

By default, this produces an executable named "KMeans.bin", which can then be
run in the following manner:

    ./KMeans.bin -m <max_clusters> \
             -n <min_clusters> \
             -t <threshold> \
             -i <input_file_name> \
             -nthreads <number of threads>

To produce the data in [1], the following values were used:

    low contention:  -m 40 -n 40 -t 0.05 -i inputs/random-n2048-d16-c16.txt
    high contention: -m 15 -n 15 -t 0.05 -i inputs/random-n2048-d16-c16.txt

For runs without a simulator, a larger input file, (more info below) can be used
instead:

    low contention:  -m 40 -n 40 -t 0.00001 -i inputs/random-n65536-d32-c16.txt
    high contention: -m 15 -n 15 -t 0.00001 -i inputs/random-n65536-d32-c16.txt   


Input Files
-----------

A section of the real image database distributed by Corel Corporation is used
for K-means. This database consists of 17695 scenery pictures. Each picture is
represented by two features: color and edge. The color feature is a vector of 9
floating points while the edge feature is a vector of size 18. Both K-means
implementations use Euclid distance as the similarity function and execute it
for the two features separately. Since the clustering quality of K-means
methods highly depends on the input parameter k, both K-means were executed
with ten different k values ranging from 4 to 13.

Smaller versions of "color", "edge", and "texture" were made by taking the
first 100 lines of each file. The smaller inputs are called "color100",
"edge100", and "texture100".

The randomX_Y files were created by generating random data sets with X points
of Y dimensions each. Values were selected from a uniform distribution.

More input sets can be generated by using "inputs/generate.py". The script picks
a given number of uniformly distributed random centers and then selects random
points around those centers using a gaussian distribution. There are two 
included input files from this script: small, random-r2048-d16-c16.txt; and
large, random-r65536-d32-c16.txt. In the filename, "n" refers to the number of
points, "d" the number of dimensions, and "c" the number of centers.


References
----------

[1] C. Cao Minh, J. Chung, C. Kozyrakis, and K. Olukotun. STAMP: Stanford 
    Transactional Applications for Multi-processing. In IISWC '08: Proceedings
    of The IEEE International Symposium on Workload Characterization,
    September 2008. 

[2] J. Pisharath. NU-MineBench 2.0. Technical Report CUCIS-2005-08-01, 2005.

[3] J.C. Bezdek. Pattern Recognition with Fuzzy Objective Function Algorithms.
    Kluwer Academic Publishers, 1981

